{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiva\\\\Desktop\\\\mernblog\\\\client\\\\src\\\\pages\\\\RegisterPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegisterPage = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  async function register() {\n    ev.preventDefault();\n    const response = await fetch('http://localhost:4000/register', {\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.status === 200) {\n      alert('registration successful');\n    } else {\n      alert('registration failed');\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"register\",\n      onSubmit: register,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"username\",\n        value: username,\n        onChange: ev => setUsername(ev.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"password\",\n        value: password,\n        onChange: ev => setPassword(ev.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(RegisterPage, \"wuQOK7xaXdVz4RMrZQhWbI751Oc=\");\n_c = RegisterPage;\nexport default RegisterPage;\nvar _c;\n$RefreshReg$(_c, \"RegisterPage\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","RegisterPage","_s","username","setUsername","useState","password","setPassword","register","ev","preventDefault","response","fetch","method","body","JSON","stringify","headers","status","alert","children","className","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","_c","$RefreshReg$"],"sources":["C:/Users/shiva/Desktop/mernblog/client/src/pages/RegisterPage.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst RegisterPage = () => {\r\n\r\n    const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n    async function register() {\r\n    ev.preventDefault();\r\n    const response = await fetch('http://localhost:4000/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify({username,password}),\r\n      headers: {'Content-Type':'application/json'},\r\n    });\r\n    if (response.status === 200) {\r\n      alert('registration successful');\r\n    } else {\r\n      alert('registration failed');\r\n    }\r\n}\r\n\r\n\r\n  return (\r\n    <div>\r\n     <form className=\"register\" onSubmit={register}>\r\n      <h1>Register</h1>\r\n      <input type=\"text\"\r\n             placeholder=\"username\"\r\n             value={username}\r\n             onChange={ev => setUsername(ev.target.value)}\r\n        />\r\n      <input type=\"password\"\r\n             placeholder=\"password\"\r\n             value={password}\r\n             onChange={ev => setPassword(ev.target.value)}\r\n            />\r\n      <button>Register</button>\r\n    </form>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RegisterPage\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGF,QAAQ,CAAC,EAAE,CAAC;EAE1C,eAAeG,QAAQA,CAAA,EAAG;IAC1BC,EAAE,CAACC,cAAc,CAAC,CAAC;IACnB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;MAC7DC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACb,QAAQ;QAACG;MAAQ,CAAC,CAAC;MACzCW,OAAO,EAAE;QAAC,cAAc,EAAC;MAAkB;IAC7C,CAAC,CAAC;IACF,IAAIN,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAE;MAC3BC,KAAK,CAAC,yBAAyB,CAAC;IAClC,CAAC,MAAM;MACLA,KAAK,CAAC,qBAAqB,CAAC;IAC9B;EACJ;EAGE,oBACEnB,OAAA;IAAAoB,QAAA,eACCpB,OAAA;MAAMqB,SAAS,EAAC,UAAU;MAACC,QAAQ,EAAEd,QAAS;MAAAY,QAAA,gBAC7CpB,OAAA;QAAAoB,QAAA,EAAI;MAAQ;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjB1B,OAAA;QAAO2B,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,UAAU;QACtBC,KAAK,EAAE1B,QAAS;QAChB2B,QAAQ,EAAErB,EAAE,IAAIL,WAAW,CAACK,EAAE,CAACsB,MAAM,CAACF,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC,eACJ1B,OAAA;QAAO2B,IAAI,EAAC,UAAU;QACfC,WAAW,EAAC,UAAU;QACtBC,KAAK,EAAEvB,QAAS;QAChBwB,QAAQ,EAAErB,EAAE,IAAIF,WAAW,CAACE,EAAE,CAACsB,MAAM,CAACF,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,eACR1B,OAAA;QAAAoB,QAAA,EAAQ;MAAQ;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEF,CAAC;AAEV,CAAC;AAAAxB,EAAA,CAvCKD,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AAyClB,eAAeA,YAAY;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}